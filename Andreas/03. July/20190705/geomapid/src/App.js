//IMPORT
import "./App.css"; //CSS page
import * as turf from "@turf/turf"; //Tools bantuan untuk hitung distance dll
import "mapbox-gl/dist/mapbox-gl.css"; //CSS mapbox
import React, { Component } from "react"; //React
import "semantic-ui-css/semantic.min.css"; //CSS Sematic
import Draw from "@urbica/react-map-gl-draw";
import "@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";
import {
  Button,
  Label,
  Table,
  Form,
  Popup,
  Icon,
  Select
} from "semantic-ui-react"; //Tools bantuan untuk UI
import MapGL, {
  GeolocateControl,
  Marker,
  Layer,
  Source
} from "@urbica/react-map-gl"; //Mapbox Urbica
import Geocoder from "react-mapbox-gl-geocoder";
import axios from "axios";

//DATA LAYER
const databanjir1 = {
  red: {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.72718612208746, -6.154339766596152],
              [106.72721825022546, -6.161750486558091],
              [106.73361175106402, -6.160728324424994],
              [106.7387201261073, -6.159067306783072],
              [106.7475553660123, -6.158140967794381],
              [106.7481324235614, -6.155170283482676],
              [106.74308830482175, -6.155042511742067],
              [106.73447796196547, -6.1547550252202825],
              [106.73107237862172, -6.155106397616194],
              [106.72718612208746, -6.154339766596152]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.73285781277269, -6.160926327882834],
              [106.73285874339376, -6.161706411727565],
              [106.73207366198494, -6.16270377502893],
              [106.73224812459148, -6.163397374842475],
              [106.73198643076552, -6.163924704796273],
              [106.73163750571024, -6.1640981587041495],
              [106.73102688684628, -6.166092874422276],
              [106.72989288038224, -6.167697314239788],
              [106.72923864586909, -6.167914130051997],
              [106.72923864586909, -6.1685645769738215],
              [106.72775571434983, -6.168954844750772],
              [106.72862802700524, -6.176153065444822],
              [106.72958757094159, -6.1758928904881145],
              [106.73032903670128, -6.175632715420704],
              [106.73098327121437, -6.176153065444822],
              [106.73102688684628, -6.174938914598755],
              [106.73207366202917, -6.174418563381536],
              [106.73172473697406, -6.173854848987318],
              [106.73203004639731, -6.172640692872619],
              [106.73246620273369, -6.17272741839929],
              [106.73298959033383, -6.171730073951849],
              [106.73390551863832, -6.17120971958262],
              [106.7342544436936, -6.171860162460078],
              [106.73495229383866, -6.1709929051184815],
              [106.73530121890343, -6.171122993816027],
              [106.73582193270767, -6.170646001782501],
              [106.73560385454823, -6.170255735250819],
              [106.73586554833963, -6.169735379451126],
              [106.73643255157174, -6.170429187087706],
              [106.73734847987623, -6.169908831441134],
              [106.73778463621255, -6.17055927591521],
              [106.7385697176041, -6.170255735250819],
              [106.7377410205633, -6.169258386168693],
              [106.73808994563586, -6.168607940098099],
              [106.7385697176041, -6.169648653417582],
              [106.73904948957232, -6.169215023123286],
              [106.73979095533196, -6.168130945801167],
              [106.74031434291652, -6.168607940106966],
              [106.74061931905914, -6.167610587907305],
              [106.74118632229107, -6.16787076691395],
              [106.74170970989127, -6.168087582672371],
              [106.74240756001899, -6.166830050087185],
              [106.74415218533943, -6.166439780771995],
              [106.74410856970758, -6.165745967914518],
              [106.74319264140303, -6.16539906113691],
              [106.74227671311576, -6.165529151198555],
              [106.74188417241135, -6.164748610332225],
              [106.7424947912753, -6.164531793208667],
              [106.74184055677938, -6.164054795262615],
              [106.740750165978, -6.16457515665158],
              [106.74096824410293, -6.165266654902524],
              [106.73970339074322, -6.165353381635583],
              [106.74031400960712, -6.166871097219712],
              [106.7375662247108, -6.168605623989393],
              [106.73691199021499, -6.169689700340669],
              [106.73569075248707, -6.169169343968079],
              [106.73647583387861, -6.168302082206154],
              [106.73603967755963, -6.16596046838697],
              [106.73630137135103, -6.1650064746011],
              [106.73730453091935, -6.164356023315008],
              [106.73704283711066, -6.163445390181607],
              [106.73516736488699, -6.163228572525398],
              [106.73516736488699, -6.163228572525398],
              [106.73516736488699, -6.163228572525398],
              [106.73490567109553, -6.160930300036668],
              [106.73717368402362, -6.16014975240526],
              [106.73699922147875, -6.159759478150647],
              [106.73285781277269, -6.160926327882834]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.74890628935145, -6.166220648203222],
              [106.7492988300558, -6.172941916072347],
              [106.75571032813576, -6.165570198406073],
              [106.75191576803917, -6.166567554443432],
              [106.75052006778373, -6.166047195006556],
              [106.74890628935145, -6.166220648203222]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.7559270605368, -6.175166310440957],
              [106.75605636686407, -6.178033102736038],
              [106.75614688129986, -6.178238791272193],
              [106.75741408335597, -6.178560179458273],
              [106.75734943020359, -6.178920133985699],
              [106.76187515185825, -6.181015578697199],
              [106.76190101311926, -6.180835602171285],
              [106.76201738881605, -6.180064273533375],
              [106.76199152755498, -6.179305799273521],
              [106.76191394374979, -6.1769275254902],
              [106.76124155080788, -6.176850392101912],
              [106.76095707689234, -6.176901814358274],
              [106.76047864345253, -6.176747547574081],
              [106.75913385759105, -6.17602763531977],
              [106.75868128545915, -6.175179166073818],
              [106.7582942549584, -6.1751534548570675],
              [106.75804857291206, -6.175217732880014],
              [106.75729859618718, -6.175050609999602],
              [106.75652275820136, -6.174973476348939],
              [106.7564193131351, -6.175076321221354],
              [106.75626414552454, -6.175024898787655],
              [106.75616070045834, -6.175204877278247],
              [106.7559270605368, -6.175166310440957]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.75912122875513, -6.226378143819602],
              [106.75972051635131, -6.22633401400563],
              [106.75949855798888, -6.227106285232011],
              [106.75955404758827, -6.22753655014472],
              [106.75949855798888, -6.227845458065843],
              [106.75936538297134, -6.227922685015557],
              [106.75943197047087, -6.228242625133959],
              [106.75933208919906, -6.228518384305133],
              [106.75919891418158, -6.228617675977034],
              [106.75905464123719, -6.228705935217334],
              [106.75912122874587, -6.228981745256547],
              [106.75914342458219, -6.22930168471909],
              [106.7592322079447, -6.22932374950183],
              [106.75921001210844, -6.2295664620593385],
              [106.75912122874587, -6.2296105916016415],
              [106.75907147191782, -6.230082135761862],
              [106.75905780159724, -6.230299568923783],
              [106.75901679067903, -6.230494352719489],
              [106.75901223390548, -6.230648367746781],
              [106.75900312035844, -6.230766143926388],
              [106.75903957451766, -6.230883920079563],
              [106.7590896989974, -6.23094733798618],
              [106.75916716408926, -6.230974517096939],
              [106.75915805055757, -6.2311058827683325],
              [106.75846542148969, -6.231096712214082],
              [106.75844263763656, -6.230367405932327],
              [106.75849276210181, -6.229610919457116],
              [106.75842441053055, -6.229271701485274],
              [106.75841985375706, -6.229063327638741],
              [106.75841529699795, -6.228746236833359],
              [106.75843352407765, -6.2286782887869805],
              [106.75844263761019, -6.22830230940707],
              [106.75833327513254, -6.228184532674689],
              [106.75830593450593, -6.228121114434259],
              [106.7583697291173, -6.227881030792261],
              [106.75841985359705, -6.22782667226339],
              [106.75841529682356, -6.227772313728849],
              [106.75853377284812, -6.227622827726265],
              [106.75862490824608, -6.227110951086445],
              [106.7586568056318, -6.226775739569774],
              [106.75889375761068, -6.226558304857448],
              [106.75912122875513, -6.226378143819602]
            ]
          ]
        }
      }
    ]
  }
};
const databanjir2 = {
  blue: {
    type: "FeatureCollection",
    features: [
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.72718612208746, -6.154339766596152],
              [106.72721825022546, -6.161750486558091],
              [106.73361175106402, -6.160728324424994],
              [106.7387201261073, -6.159067306783072],
              [106.7475553660123, -6.158140967794381],
              [106.7481324235614, -6.155170283482676],
              [106.74308830482175, -6.155042511742067],
              [106.73447796196547, -6.1547550252202825],
              [106.73107237862172, -6.155106397616194],
              [106.72718612208746, -6.154339766596152]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.73285781277269, -6.160926327882834],
              [106.73285874339376, -6.161706411727565],
              [106.73207366198494, -6.16270377502893],
              [106.73224812459148, -6.163397374842475],
              [106.73198643076552, -6.163924704796273],
              [106.73163750571024, -6.1640981587041495],
              [106.73102688684628, -6.166092874422276],
              [106.72989288038224, -6.167697314239788],
              [106.72923864586909, -6.167914130051997],
              [106.72923864586909, -6.1685645769738215],
              [106.72775571434983, -6.168954844750772],
              [106.72862802700524, -6.176153065444822],
              [106.72958757094159, -6.1758928904881145],
              [106.73032903670128, -6.175632715420704],
              [106.73098327121437, -6.176153065444822],
              [106.73102688684628, -6.174938914598755],
              [106.73207366202917, -6.174418563381536],
              [106.73172473697406, -6.173854848987318],
              [106.73203004639731, -6.172640692872619],
              [106.73246620273369, -6.17272741839929],
              [106.73298959033383, -6.171730073951849],
              [106.73390551863832, -6.17120971958262],
              [106.7342544436936, -6.171860162460078],
              [106.73495229383866, -6.1709929051184815],
              [106.73530121890343, -6.171122993816027],
              [106.73582193270767, -6.170646001782501],
              [106.73560385454823, -6.170255735250819],
              [106.73586554833963, -6.169735379451126],
              [106.73643255157174, -6.170429187087706],
              [106.73734847987623, -6.169908831441134],
              [106.73778463621255, -6.17055927591521],
              [106.7385697176041, -6.170255735250819],
              [106.7377410205633, -6.169258386168693],
              [106.73808994563586, -6.168607940098099],
              [106.7385697176041, -6.169648653417582],
              [106.73904948957232, -6.169215023123286],
              [106.73979095533196, -6.168130945801167],
              [106.74031434291652, -6.168607940106966],
              [106.74061931905914, -6.167610587907305],
              [106.74118632229107, -6.16787076691395],
              [106.74170970989127, -6.168087582672371],
              [106.74240756001899, -6.166830050087185],
              [106.74415218533943, -6.166439780771995],
              [106.74410856970758, -6.165745967914518],
              [106.74319264140303, -6.16539906113691],
              [106.74227671311576, -6.165529151198555],
              [106.74188417241135, -6.164748610332225],
              [106.7424947912753, -6.164531793208667],
              [106.74184055677938, -6.164054795262615],
              [106.740750165978, -6.16457515665158],
              [106.74096824410293, -6.165266654902524],
              [106.73970339074322, -6.165353381635583],
              [106.74031400960712, -6.166871097219712],
              [106.7375662247108, -6.168605623989393],
              [106.73691199021499, -6.169689700340669],
              [106.73569075248707, -6.169169343968079],
              [106.73647583387861, -6.168302082206154],
              [106.73603967755963, -6.16596046838697],
              [106.73630137135103, -6.1650064746011],
              [106.73730453091935, -6.164356023315008],
              [106.73704283711066, -6.163445390181607],
              [106.73516736488699, -6.163228572525398],
              [106.73516736488699, -6.163228572525398],
              [106.73516736488699, -6.163228572525398],
              [106.73490567109553, -6.160930300036668],
              [106.73717368402362, -6.16014975240526],
              [106.73699922147875, -6.159759478150647],
              [106.73285781277269, -6.160926327882834]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.74890628935145, -6.166220648203222],
              [106.7492988300558, -6.172941916072347],
              [106.75571032813576, -6.165570198406073],
              [106.75191576803917, -6.166567554443432],
              [106.75052006778373, -6.166047195006556],
              [106.74890628935145, -6.166220648203222]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.75912122875513, -6.226378143819602],
              [106.75972051635131, -6.22633401400563],
              [106.75949855798888, -6.227106285232011],
              [106.75955404758827, -6.22753655014472],
              [106.75949855798888, -6.227845458065843],
              [106.75936538297134, -6.227922685015557],
              [106.75943197047087, -6.228242625133959],
              [106.75933208919906, -6.228518384305133],
              [106.75919891418158, -6.228617675977034],
              [106.75905464123719, -6.228705935217334],
              [106.75912122874587, -6.228981745256547],
              [106.75914342458219, -6.22930168471909],
              [106.7592322079447, -6.22932374950183],
              [106.75921001210844, -6.2295664620593385],
              [106.75912122874587, -6.2296105916016415],
              [106.75907147191782, -6.230082135761862],
              [106.75905780159724, -6.230299568923783],
              [106.75901679067903, -6.230494352719489],
              [106.75901223390548, -6.230648367746781],
              [106.75900312035844, -6.230766143926388],
              [106.75903957451766, -6.230883920079563],
              [106.7590896989974, -6.23094733798618],
              [106.75916716408926, -6.230974517096939],
              [106.75915805055757, -6.2311058827683325],
              [106.75846542148969, -6.231096712214082],
              [106.75844263763656, -6.230367405932327],
              [106.75849276210181, -6.229610919457116],
              [106.75842441053055, -6.229271701485274],
              [106.75841985375706, -6.229063327638741],
              [106.75841529699795, -6.228746236833359],
              [106.75843352407765, -6.2286782887869805],
              [106.75844263761019, -6.22830230940707],
              [106.75833327513254, -6.228184532674689],
              [106.75830593450593, -6.228121114434259],
              [106.7583697291173, -6.227881030792261],
              [106.75841985359705, -6.22782667226339],
              [106.75841529682356, -6.227772313728849],
              [106.75853377284812, -6.227622827726265],
              [106.75862490824608, -6.227110951086445],
              [106.7586568056318, -6.226775739569774],
              [106.75889375761068, -6.226558304857448],
              [106.75912122875513, -6.226378143819602]
            ]
          ]
        }
      },
      {
        type: "Feature",
        geometry: {
          type: "Polygon",
          coordinates: [
            [
              [106.7495425703861, -6.173276322806643],
              [106.74971326067595, -6.173568584672196],
              [106.74971326066185, -6.173691146050118],
              [106.74952323461076, -6.174275669145985],
              [106.74955168300056, -6.174558502680469],
              [106.74966547651081, -6.174935613819258],
              [106.74966547650143, -6.175171308152059],
              [106.74928630712805, -6.175774685147076],
              [106.74949492858252, -6.176161223171206],
              [106.74974148120168, -6.1763686337071135],
              [106.74977941236631, -6.177000292563619],
              [106.74991217147522, -6.177226558235745],
              [106.75010182734741, -6.177151136355732],
              [106.7502630348298, -6.177141708622045],
              [106.75044320789453, -6.177339691027356],
              [106.75044320789453, -6.177481106995188],
              [106.7505380358225, -6.177594239748629],
              [106.7508604508036, -6.177386829692978],
              [106.7510690722417, -6.177273696895085],
              [106.75118286576833, -6.177320835566519],
              [106.75131562487718, -6.17750939017769],
              [106.75130941662383, -6.177795817178222],
              [106.75108182958695, -6.177984371636455],
              [106.7509016565059, -6.178342624894441],
              [106.75078786299565, -6.178729161059692],
              [106.75052234477778, -6.179407955568621],
              [106.75056975874992, -6.179700214033232],
              [106.75036113729544, -6.179945333935379],
              [106.75035165439368, -6.180162170695922],
              [106.75006717059364, -6.180454428760129],
              [106.75046544790399, -6.1811049380670795],
              [106.75080682846743, -6.181406623268373],
              [106.75150855516029, -6.181934571956845],
              [106.75179303896033, -6.18227396725581],
              [106.75214390229866, -6.183047033543545],
              [106.75328202261204, -6.183905315455064],
              [106.7539553009313, -6.184508682491014],
              [106.75452426851524, -6.185545717979451],
              [106.75507427019915, -6.186667930295414],
              [106.75531134004353, -6.187035605245555],
              [106.75542513355367, -6.187752099289568],
              [106.75563375500815, -6.188760845818976],
              [106.7558234108352, -6.189665887976901],
              [106.75578547965421, -6.190702913345447],
              [106.75716048468274, -6.190608638384262],
              [106.7571130707106, -6.190240965936567],
              [106.75724582981951, -6.190118408386311],
              [106.75764410714208, -6.190137263390895],
              [106.757890734961, -6.189779018107416],
              [106.75807090802567, -6.189741308071973],
              [106.75831746066115, -6.189948713282263],
              [106.75855453048922, -6.189816728156444],
              [106.75876315193966, -6.1895150477542416],
              [106.75851659930419, -6.189213367179832],
              [106.75847866813956, -6.188911686433173],
              [106.75841228858513, -6.188836266219653],
              [106.7582321155204, -6.188921113957079],
              [106.75802349406592, -6.188873976319655],
              [106.75786228658353, -6.188223476587211],
              [106.75808039081289, -6.187761527010508],
              [106.75813728757612, -6.187629541338353],
              [106.75808039081289, -6.187563548489919],
              [106.75772004417973, -6.187356142552673],
              [106.75735969805032, -6.1875824037948775],
              [106.75713211099713, -6.1874881282931256],
              [106.75696142072366, -6.186837626838553],
              [106.75667693692355, -6.186177697010834],
              [106.75690452396032, -6.185687462902237],
              [106.75692348955897, -6.185583759462972],
              [106.75669590252215, -6.185272649055662],
              [106.75648728106762, -6.185055814417652],
              [106.75660107457793, -6.1838207980623],
              [106.75724590445196, -6.183669956339983],
              [106.75773900969034, -6.183339989543924],
              [106.7578528032169, -6.1831042988585665],
              [106.75766314734472, -6.182887463331426],
              [106.75762521618003, -6.181416750474995],
              [106.75742607746798, -6.181171631457232],
              [106.7572364216121, -6.180794524761069],
              [106.75733124954002, -6.178937270355362],
              [106.75737866351216, -6.17856016206693],
              [106.75610796878726, -6.178230192191322],
              [106.75592779572253, -6.175222742099763],
              [106.75581400219596, -6.1752133143317],
              [106.75578555382248, -6.175335875335833],
              [106.75513124108545, -6.17527930872086],
              [106.75513124108545, -6.175194458795119],
              [106.7546571012096, -6.175222742145607],
              [106.75451485930955, -6.175175603303629],
              [106.75433468624487, -6.175222742145607],
              [106.7539458917093, -6.175175603303629],
              [106.75401227126378, -6.175071897804045],
              [106.75376571864462, -6.1750530422624195],
              [106.75361399395337, -6.174958764527844],
              [106.75330106177978, -6.175373586444181],
              [106.75183122861915, -6.174581653424326],
              [106.7501053602524, -6.173459746245541],
              [106.74986829042439, -6.173158056515248],
              [106.74982087645225, -6.173082634055859],
              [106.7496786345522, -6.173101489667616],
              [106.74957432383303, -6.173167484319876],
              [106.7495425703861, -6.173276322806643]
            ]
          ]
        }
      }
    ]
  }
};
var dataPolice = [
  [106.8544, -6.1994],
  [106.8732, -6.2041],
  [106.8468, -6.181],
  [106.8392, -6.1796],
  [106.8518, -6.1789],
  [106.8495, -6.1835],
  [106.8614, -6.1733],
  [106.8552, -6.1597],
  [106.847, -6.1569],
  [106.839, -6.1705],
  [106.8075, -6.1661],
  [106.8118, -6.181],
  [106.7981, -6.195],
  [106.803, -6.1949],
  [106.7292, -6.1461],
  [106.7384, -6.153],
  [106.7189, -6.0956],
  [106.7736, -6.1089],
  [106.7903, -6.1032],
  [106.8006, -6.1246],
  [106.8226, -6.1331],
  [106.87, -6.1347],
  [106.8802, -6.1151],
  [106.8821, -6.1135],
  [106.882, -6.1075],
  [106.8983, -6.1301],
  [106.9167, -6.1201],
  [106.9144, -6.1219],
  [106.9144, -6.1214],
  [106.8939, -6.1168],
  [106.7893, -6.174],
  [106.7996, -6.1675],
  [106.7698, -6.2171],
  [106.7649, -6.1989],
  [106.8714, -6.2466],
  [106.8654, -6.3051],
  [106.891, -6.2105],
  [106.8099, -6.2004],
  [106.802, -6.1526],
  [106.8609, -6.19],
  [106.8517, -6.2315],
  [106.8386, -6.2676],
  [106.8386, -6.2686],
  [106.8224, -6.2717],
  [106.7933, -6.2829],
  [106.7932, -6.2832],
  [106.7936, -6.2691],
  [106.7823, -6.2734],
  [106.7688, -6.2876],
  [106.7986, -6.2534],
  [106.8016, -6.2406],
  [106.7896, -6.2416],
  [106.8034, -6.2389],
  [106.8014, -6.2388],
  [106.8124, -6.2227],
  [106.8266, -6.2406],
  [106.855, -6.2438],
  [106.8557, -6.2447],
  [106.8259, -6.2113],
  [106.8684, -6.2438],
  [106.8633, -6.2146],
  [106.9175, -6.2476],
  [106.9346, -6.2217],
  [106.9406, -6.1843]
];
var dataCCTV = [
  [
    107.5736,
    -6.9717,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=3&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5866,
    -7.0479,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=6&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5287,
    -7.0201,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=7&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5304,
    -7.0242,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=8&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5405,
    -7.0202,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=9&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5538,
    -6.999,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=10&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.5286,
    -7.0298,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=11&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.7566,
    -6.9379,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=5&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.8926,
    -7.0213,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=4&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.6263,
    -6.9915,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=2&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [
    107.6362,
    -6.9728,
    "http://103.10.61.82:5119/zm/cgi-bin/nph-zms?mode=jpeg&monitor=1&scale=100&maxfps=30&buffer=1000&user=dishub&pass=bidang"
  ],
  [106.9587, -6.258, "http://203.77.210.41:2000/mjpg/video.mjpg"],
  [115.1686, -8.7183, "http://203.142.72.42/mjpg/video.mjpg"],
  [107.5728, -6.8901, "http://210.23.68.3:81/mjpg/video.mjpg"],
  [112.701, -7.2873, "http://116.68.252.222:89/mjpg/video.mjpg"],
  [107.505, -6.8432, "http://210.23.68.3:84/mjpg/video.mjpg"],
  [110.4521, -6.9566, "http://119.2.50.114:86/mjpg/video.mjpg"],
  [112.7106, -7.3441, "http://116.68.252.222:83/mjpg/video.mjpg"],
  [106.8246, -6.224, "http://202.74.79.122:8000/mjpg/video.mjpg"],
  [107.7492, -6.9446, "http://210.23.68.3:86/mjpg/video.mjpg"],
  [108.4833, -6.6991, "http://202.159.10.82:88/mjpg/video.mjpg"],
  [115.1244, -8.6543, "http://202.58.207.176:8090/mjpg/video.mjpg"],
  [110.3687, -7.7961, "https://www.youtube.com/embed/dNWNU1UiFPI"],
  [107.4258, -6.5654, "http://210.23.68.3:88/mjpg/video.mjpg"],
  [
    106.8952,
    -6.3665,
    "http://jasamargalive.com/webjm3/mjm/index.php?r=site/getarea&a=3&b=547#"
  ]
];
var rows;

class App extends Component {
  // INISIALISASI UTAMA
  constructor() {
    super();

    // INISIALISASI
    this.state = {
      viewport: {
        latitude: -6.9184,
        longitude: 107.6093,
        zoom: 5.5
      },

      //MAPBOX
      mapstyle: "mapbox://styles/mapbox/streets-v11",

      //TOOLBOX
      data: {
        type: "FeatureCollection",
        features: []
      },
      display: "none",
      table: "none",
      conver: "none",
      details: "none",
      inspect: "none",
      navigation: "none",

      //CONVERTER
      inputarea: 1,
      inputarea_: 1,
      inputlength: 1,
      inputlength_: 1,
      outputarea: 1,
      outputarea_: 1,
      outputlength: 1,
      outputlength_: 1,

      //LAYER MANAGER
      layer: "0.5em",
      close: "inline-block",
      open: "none",
      arrTbl: [],
      label: [],
      banjir1: 0,
      banjir2: 0,
      before: {
        red: ""
      },
      after: {
        blue: ""
      },
      police: "none",
      cctv: "none",
      arrPolice: [],
      arrCCTV: [],
      arrshowPolice: [],
      arrshowCCTV: [],
      tablepolice: "none",
      tableCCTV: "none",
      onPolice: "block",
      offPolice: "none",
      onBanjir1: "block",
      offBanjir1: "none",
      onBanjir2: "block",
      offBanjir2: "none",
      onCCTV: "block",
      offCCTV: "none",
      arrinspectPolice: [],
      arrinspectCCTV: [],
      arrinspectBanjir1: [],
      arrinspectBanjir2: [],
      closeinspect: "none",
      cctvbutton: 0,
      kantorbutton: 0,

      layerlists: []
    };

    //DEKLARASI FUNCTION ATAU PROCEDURE
    this._StyleChange = this._StyleChange.bind(this);
    this._onClick = this._onClick.bind(this);
    this._sum = this._sum.bind(this);
    this._converter = this._converter.bind(this);
    this._addPolice = this._addPolice.bind(this);
    this._addCCTV = this._addCCTV.bind(this);
    this._showPolice = this._showPolice.bind(this);
    this._showCCTV = this._showCCTV.bind(this);
    this._onclickPolice = this._onclickPolice.bind(this);
    this._onclickCCTV = this._onclickCCTV.bind(this);
    this._inspectPolice = this._inspectPolice.bind(this);
    this._inspectCCTV = this._inspectCCTV.bind(this);
    this._inspectBanjir1 = this._inspectBanjir1.bind(this);
    this._Inspect = this._Inspect.bind(this);
  }

  // FUNCTION BAWAAN
  componentDidMount() {
    document.getElementById("isilang").innerHTML =
      "Long : 107.6093, Lat : -6.9184";
    this.getLayersByUsername();
  }

  // FUNCTION
  _addPolice() {
    var police = [];
    var i;
    for (i = 0; i < dataPolice.length; i++) {
      police.push(
        <Marker longitude={dataPolice[i][0]} latitude={dataPolice[i][1]}>
          <Icon name="user secret" />
        </Marker>
      );
    }
    this.setState({ arrPolice: police, onPolice: "none", offPolice: "block" });
  }
  _addCCTV() {
    var CCTV = [];
    var i;
    for (i = 0; i < dataCCTV.length; i++) {
      CCTV.push(
        <Marker longitude={dataCCTV[i][0]} latitude={dataCCTV[i][1]}>
          <Popup on="click" pinned trigger={<Icon name="video" />}>
            <img src={dataCCTV[i][2]} width="320" alt="" />
          </Popup>
        </Marker>
      );
    }
    this.setState({ arrCCTV: CCTV, onCCTV: "none", offCCTV: "block" });
  }
  _inspectPolice() {
    var inspectPolice = [];
    var i;
    for (i = 0; i < dataPolice.length; i++) {
      inspectPolice.push(
        <Marker longitude={dataPolice[i][0]} latitude={dataPolice[i][1]}>
          <Popup
            on="click"
            pinned
            trigger={<Icon name="user secret" color="red" />}
          >
            <div style={{ height: "200px", overflowY: "scroll" }}>
              <Table size="small" collapsing>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell colSpan="2">
                      <center>Inspect Police</center>
                    </Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  <Table.Row>
                    <Table.Cell>Longtitude</Table.Cell>
                    <Table.Cell>{dataPolice[i][0]}</Table.Cell>
                  </Table.Row>
                  <Table.Row>
                    <Table.Cell>Latitude</Table.Cell>
                    <Table.Cell>{dataPolice[i][1]}</Table.Cell>
                  </Table.Row>
                </Table.Body>
              </Table>
            </div>
          </Popup>
        </Marker>
      );
    }
    this.setState({
      arrinspectPolice: inspectPolice
    });
  }
  _inspectBanjir1() {
    var inspectBanjir1 = [];
    var i, j;
    for (i = 0; i < databanjir1.red.features.length; i++) {
      var dataBanjir1 = [];
      for (
        j = 0;
        j < databanjir1.red.features[i].geometry.coordinates[0].length;
        j++
      ) {
        dataBanjir1.push(
          <Table.Row>
            <Table.Cell>{j + 1}</Table.Cell>
            <Table.Cell>
              {databanjir1.red.features[i].geometry.coordinates[0][j][0]}
            </Table.Cell>
            <Table.Cell>
              {databanjir1.red.features[i].geometry.coordinates[0][j][1]}
            </Table.Cell>
          </Table.Row>
        );
      }
      var arr = turf.centroid(
        turf.polygon(databanjir1.red.features[i].geometry.coordinates)
      ).geometry.coordinates;
      inspectBanjir1.push(
        <Marker longitude={arr[0]} latitude={arr[1]}>
          <Popup on="click" pinned trigger={<Icon name="info" color="red" />}>
            <div style={{ height: "200px", overflowY: "scroll" }}>
              <Table size="small" collapsing>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell colSpan="3">
                      <center>Inspect Banjir 1990</center>
                    </Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  <Table.Row>
                    <Table.Cell>No</Table.Cell>
                    <Table.Cell>Longtitude</Table.Cell>
                    <Table.Cell>Latitude</Table.Cell>
                  </Table.Row>
                  {dataBanjir1}
                </Table.Body>
              </Table>
            </div>
          </Popup>
        </Marker>
      );
    }
    this.setState({
      arrinspectBanjir1: inspectBanjir1
    });
  }
  _inspectBanjir2() {
    var inspectBanjir2 = [];
    var i, j;

    for (i = 0; i < databanjir2.blue.features.length; i++) {
      var dataBanjir2 = [];
      for (
        j = 0;
        j < databanjir2.blue.features[i].geometry.coordinates[0].length;
        j++
      ) {
        dataBanjir2.push(
          <Table.Row>
            <Table.Cell>{j + 1}</Table.Cell>
            <Table.Cell>
              {databanjir2.blue.features[i].geometry.coordinates[0][j][0]}
            </Table.Cell>
            <Table.Cell>
              {databanjir2.blue.features[i].geometry.coordinates[0][j][1]}
            </Table.Cell>
          </Table.Row>
        );
      }
      var arr = turf.centroid(
        turf.polygon(databanjir2.blue.features[i].geometry.coordinates)
      ).geometry.coordinates;
      inspectBanjir2.push(
        <Marker longitude={arr[0]} latitude={arr[1]}>
          <Popup on="click" pinned trigger={<Icon name="info" color="red" />}>
            <div style={{ height: "200px", overflowY: "scroll" }}>
              <Table size="small" collapsing>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell colSpan="3">
                      <center>Inspect Banjir 2000</center>
                    </Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  <Table.Row>
                    <Table.Cell>No</Table.Cell>
                    <Table.Cell>Longtitude</Table.Cell>
                    <Table.Cell>Latitude</Table.Cell>
                  </Table.Row>
                  {dataBanjir2}
                </Table.Body>
              </Table>
            </div>
          </Popup>
        </Marker>
      );
    }
    this.setState({
      arrinspectBanjir2: inspectBanjir2
    });
  }
  _inspectCCTV() {
    var inspectCCTV = [];
    var i;
    for (i = 0; i < dataCCTV.length; i++) {
      inspectCCTV.push(
        <Marker longitude={dataCCTV[i][0]} latitude={dataCCTV[i][1]}>
          <Popup on="click" pinned trigger={<Icon name="video" color="red" />}>
            <div style={{ height: "200px", overflowY: "scroll" }}>
              <Table size="small" collapsing>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell colSpan="2">
                      <center>Inspect CCTV</center>
                    </Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  <Table.Row>
                    <Table.Cell>Longtitude</Table.Cell>
                    <Table.Cell>{dataCCTV[i][0]}</Table.Cell>
                  </Table.Row>
                  <Table.Row>
                    <Table.Cell>Latitude</Table.Cell>
                    <Table.Cell>{dataCCTV[i][1]}</Table.Cell>
                  </Table.Row>
                </Table.Body>
              </Table>
            </div>
          </Popup>
        </Marker>
      );
    }
    this.setState({
      arrinspectCCTV: inspectCCTV
    });
  }
  _showPolice() {
    if (this.state.details === "inline-block") {
      this.setState({
        tablepolice: "block",
        arrshowCCTV: [],
        tableCCTV: "none"
      });
      var showpolice = [];
      var i;
      for (i = 0; i < dataPolice.length; i++) {
        showpolice.push(
          <Table.Row>
            <Table.Cell id={i} onClick={this._onclickPolice}>
              {i + 1}
            </Table.Cell>
            <Table.Cell id={i} onClick={this._onclickPolice}>
              {dataPolice[i][0]}
            </Table.Cell>
            <Table.Cell id={i} onClick={this._onclickPolice}>
              {dataPolice[i][1]}
            </Table.Cell>
          </Table.Row>
        );
      }
    }
    this.setState({ arrshowPolice: showpolice });
  }
  _showCCTV() {
    if (this.state.details === "inline-block") {
      this.setState({
        tableCCTV: "block",
        arrshowPolice: [],
        tablepolice: "none"
      });
      var showCCTV = [];
      var i;
      for (i = 0; i < dataCCTV.length; i++) {
        showCCTV.push(
          <Table.Row>
            <Table.Cell id={i} onClick={this._onclickCCTV}>
              {i + 1}
            </Table.Cell>
            <Table.Cell id={i} onClick={this._onclickCCTV}>
              {dataCCTV[i][2]}
            </Table.Cell>
            <Table.Cell id={i} onClick={this._onclickCCTV}>
              {dataCCTV[i][0]}
            </Table.Cell>
            <Table.Cell id={i} onClick={this._onclickCCTV}>
              {dataCCTV[i][1]}
            </Table.Cell>
          </Table.Row>
        );
      }
    }
    this.setState({ arrshowCCTV: showCCTV });
  }
  _onclickPolice(event) {
    this.setState({
      viewport: {
        longitude: dataPolice[event.target.id][0],
        latitude: dataPolice[event.target.id][1],
        zoom: 20
      }
    });
  }
  _onclickCCTV(event) {
    this.setState({
      viewport: {
        longitude: dataCCTV[event.target.id][0],
        latitude: dataCCTV[event.target.id][1],
        zoom: 20
      }
    });
  }
  _onClick(e) {
    //procedure untuk hover get coordinate
    //menghilangkan koma yang banyak di belakang angka
    let lng = parseInt(e.lngLat.lng * 10000) / 10000;
    let lat = parseInt(e.lngLat.lat * 10000) / 10000;
    document.getElementById("isilang").innerHTML =
      "Long : " + lng + " Lat : " + lat;
  }
  _StyleChange(e) {
    //procedure untuk change style maps
    this.setState({
      mapstyle: e.currentTarget.value
    });
  }
  _sum(feat) {
    this.state.data.features.push(feat[0]);
    var i, j, a, b;
    var total = 0;
    var array = [];
    var con = this.state.data.features.length - 1;
    var arr = this.state.data.features[con].geometry.coordinates;
    this.setState({ label: [], table: "", conver: "none" });
    if (this.state.data.features[con].geometry.type === "LineString") {
      for (i = 1; i < arr.length; i++) {
        var from = turf.point([arr[i - 1][0], arr[i - 1][1]]);
        var to = turf.point([arr[i][0], arr[i][1]]);
        var options = { units: "kilometers" }; //satuan perhitungan
        total += turf.distance(from, to, options); //menghitung jarak data 1 dan 2
        total = parseInt(total * 100) / 100;
      }
      for (j = 0; j < arr.length; j++) {
        a = parseInt(arr[j][0] * 10000) / 10000;
        b = parseInt(arr[j][1] * 10000) / 10000;
        array.push(
          <Table.Row collapsing>
            <Table.Cell>{a}</Table.Cell>
            <Table.Cell>{b}</Table.Cell>
          </Table.Row>
        );
      }
      this.setState({ label: <Label>Distance : {total} Km</Label> });
    } else if (this.state.data.features[con].geometry.type === "Polygon") {
      var polygon = turf.polygon(arr);
      total = parseInt(turf.area(polygon) / 10763.91) / 100;
      for (i = 1; i < arr[0].length; i++) {
        a = parseInt(arr[0][i - 1][0] * 10000) / 10000;
        b = parseInt(arr[0][i - 1][1] * 10000) / 10000;
        array.push(
          <Table.Row collapsing>
            <Table.Cell>{a}</Table.Cell>
            <Table.Cell>{b}</Table.Cell>
          </Table.Row>
        );
        this.setState({
          label: (
            <Label>
              Area : {total} Km<sup>2</sup>
            </Label>
          )
        });
      }
    } else {
      a = parseInt(arr[0] * 10000) / 10000;
      b = parseInt(arr[1] * 10000) / 10000;
      array.push(
        <Table.Row collapsing>
          <Table.Cell>{a}</Table.Cell>
          <Table.Cell>{b}</Table.Cell>
        </Table.Row>
      );
    }
    this.setState({ arrTbl: array, mode: "simple_select" });
  }
  _converter(e, { name, value }) {
    var banding, hasil;
    if ([name][0] === "inputarea") {
      this.setState({ inputarea: value });
      banding = this.state.outputarea_ / this.state.inputarea_;
      hasil = banding * value;
      this.setState({ outputarea: hasil });
    } else if ([name][0] === "inputlength") {
      this.setState({ inputlength: value });
      banding = this.state.outputlength_ / this.state.inputlength_;
      hasil = banding * value;
      this.setState({ outputlength: hasil });
    } else if ([name][0] === "inputarea_") {
      this.setState({ inputarea_: value });
      banding = this.state.outputarea_ / value;
      hasil = banding * this.state.inputarea;
      this.setState({ outputarea: hasil });
    } else if ([name][0] === "outputarea_") {
      this.setState({ outputarea_: value });
      banding = value / this.state.inputarea_;
      hasil = banding * this.state.inputarea;
      this.setState({ outputarea: hasil });
    } else if ([name][0] === "inputlength_") {
      this.setState({ inputlength_: value });
    } else if ([name][0] === "outputlength_") {
      this.setState({ outputlength_: value });
    }
  }
  _Inspect(e, { name, value }) {
    if ([name][0] === "datainspect") {
      if (value === 1) {
        this._inspectBanjir1();
        this._inspectBanjir2();
        this._inspectPolice();
        this._inspectCCTV();
        this.setState({
          cctvbutton: 1,
          kantorbutton: 1,
          arrPolice: [],
          onPolice: "block",
          offPolice: "none",
          arrCCTV: [],
          onCCTV: "block",
          offCCTV: "none"
        });
      } else if (value === 2) {
        this._inspectCCTV();
        this.setState({
          arrinspectBanjir1: [],
          arrinspectBanjir2: [],
          arrinspectPolice: [],
          cctvbutton: 1,
          arrCCTV: [],
          onCCTV: "block",
          offCCTV: "none"
        });
      } else if (value === 3) {
        this._inspectPolice();
        this.setState({
          arrinspectBanjir1: [],
          arrinspectBanjir2: [],
          arrinspectCCTV: [],
          kantorbutton: 1,
          arrPolice: [],
          onPolice: "block",
          offPolice: "none"
        });
      } else if (value === 4) {
        this._inspectBanjir1();
        this.setState({
          arrinspectBanjir2: [],
          arrinspectCCTV: [],
          arrinspectPolice: []
        });
      } else if (value === 5) {
        this._inspectBanjir2();
        this.setState({
          arrinspectBanjir1: [],
          arrinspectCCTV: [],
          arrinspectPolice: []
        });
      }
      this.setState({
        inspect: "none",
        closeinspect: "block"
      });
    }
  }
  onSelected = (viewport, item) => {
    this.setState({ viewport });
    console.log("Selected: ", item);
  };
  getLayersByUsername() {
    rows = [];
    this.setState({ mapDimmerActive: true });
    axios
      .get(
        "https://hnjp62bwxh.execute-api.us-west-2.amazonaws.com/GeoDev/getlayerbyusername",
        {
          params: {
            username: "yacob89"
          }
        }
      )
      .then(response => {
        // handle success
        const layerList = response.data;

        var i;
        for (i = 0; i < layerList.length; i++) {
          rows.push({
            _id: layerList[i]._id,
            name: layerList[i].name,
            username: layerList[i].username,
            createdAt: layerList[i].createdAt,
            description: layerList[i].description,
            layerType: layerList[i].layer_type,
            subscriber: layerList[i].subscriber,
            geojson: layerList[i].geojson,
            arrayindex: i,
            opacity: 0.5,
            visibility: "visible"
          });
        }
        this.setState({
          layerlists: rows,
          // results: rows
        });
        console.log(this.state.layerlists[0].geojson);
        // this.setState({ mapDimmerActive: false });
      })
      // .catch(error => {
      //   console.log("Axios error: ", error);
      //   this.setState({ mapDimmerActive: false });
      // });
  }

  // TAMPILAN UI
  render() {
    return (
      // PAGE
      <div id="Page">
        {/* MAPBOX AND DRAW */}
        <MapGL
          style={{ width: "100%", height: "576px" }}
          mapStyle={this.state.mapstyle}
          accessToken={
            "pk.eyJ1IjoiYW5kcmVhc2NocmlzdGlhbiIsImEiOiJjanZ2cnZhMjg0NWtmNDN1aTMxcGphY21xIn0.CDEBH4hJPmAhRDOtzz73Mw"
          }
          onClick={this._onClick}
          latitude={this.state.viewport.latitude}
          longitude={this.state.viewport.longitude}
          zoom={this.state.viewport.zoom}
          onViewportChange={viewport => this.setState({ viewport })}
          viewportChangeMethod={"flyTo"}
        >
          {/* MY LOCATION */}
          <GeolocateControl position="top-right" />

          {/* PLACE INSPERCT */}
          {this.state.arrinspectBanjir1}
          {this.state.arrinspectBanjir2}
          {this.state.arrinspectPolice}
          {this.state.arrinspectCCTV}

          {/* POLICE */}
          {this.state.arrPolice}

          {/* CCTV */}
          {this.state.arrCCTV}

          {/* BANJIR1 */}
          {Object.entries(this.state.before).map(([layerId]) => (
            <React.Fragment key={layerId}>
              <Source id={layerId} type="geojson" data={databanjir1[layerId]} />
              <Layer
                id={layerId}
                type="fill"
                source={layerId}
                paint={{
                  "fill-color": "red",
                  "fill-opacity": this.state.banjir1
                }}
              />
            </React.Fragment>
          ))}

          {/* BANJIR2 */}
          {Object.entries(this.state.after).map(([layerId]) => (
            <React.Fragment key={layerId}>
              <Source id={layerId} type="geojson" data={databanjir2[layerId]} />
              <Layer
                id={layerId}
                type="fill"
                source={layerId}
                paint={{
                  "fill-color": "blue",
                  "fill-opacity": this.state.banjir2
                }}
              />
            </React.Fragment>
          ))}

          {/* DRAW PROPERTIES */}
          <Draw
            data={this.state.data}
            mode={this.state.mode}
            onDrawCreate={({ features }) => this._sum(features)}
            onDrawUpdate={({ features }) => this._sum(features)}
            combineFeaturesControl={false}
            uncombineFeaturesControl={false}
            lineStringControl={false}
            pointControl={false}
            polygonControl={false}
            trashControl={false}
          />
          {/* <Source
            id="states"
            type="geojson"
            data={this.state.layerlists[0].geojson}

          />
          <Layer
            id="state-fills"
            type="fill"
            source="states"
            paint={{
              "fill-color": "#627BC1",
              "fill-opacity": 0.5
            }}
          /> */}

          {/* SEARCH */}
          <div
            style={{
              position: "fixed",
              top: "15px",
              right: "50px",
              maxWidth: "150px",
              boxShadow: "0 0 10px 2px rgba(0,0,0,.1)",
              borderRadius: "4px",
              backgroundColor: "white"
            }}
          >
            <Geocoder
              mapboxApiAccessToken="pk.eyJ1IjoiYW5kcmVhc2NocmlzdGlhbiIsImEiOiJjanZ2cnZhMjg0NWtmNDN1aTMxcGphY21xIn0.CDEBH4hJPmAhRDOtzz73Mw"
              onSelected={this.onSelected}
              viewport={this.state.viewport}
              hideOnSelect={true}
            />
          </div>
        </MapGL>

        {/* TOOLBOXS */}
        <div
          style={{
            display: this.state.display,
            overflowY: "scroll",
            float: "left",
            position: "fixed",
            bottom: "47px",
            backgroundColor: "rgba(113, 124, 124, 0.7)",
            width: "285px",
            height: "250px",
            left: "0.5em",
            padding: "5px"
          }}
        >
          {/* CLOSE BUTTON */}
          <Button
            compact
            color="red"
            size="small"
            onClick={() =>
              this.setState({
                display: "none",
                arrTbl: [],
                label: [],
                data: {
                  type: "FeatureCollection",
                  features: []
                }
              })
            }
            style={{
              position: "fixed",
              left: "253px",
              bottom: "297px",
              color: "white",
              opacity: "0.7"
            }}
          >
            X
          </Button>

          {/* MENU TOOLBOXS */}
          <div
            style={{
              height: "50px",
              overflowX: "scroll",
              display: "linear"
            }}
          >
            <Button.Group>
              <Button
                compact
                size="small"
                onClick={() => this.setState({ mode: "draw_point" })}
              >
                <img src="elevation.png" width="20px" height="20px" alt="" />
              </Button>
              <Button
                compact
                size="small"
                onClick={() =>
                  this.setState({
                    conver: "inline-block",
                    table: "none",
                    label: []
                  })
                }
              >
                <img src="converter.png" width="20px" height="20px" alt="" />
              </Button>
              <Button
                compact
                size="small"
                onClick={() => this.setState({ mode: "draw_line_string" })}
              >
                <img src="direction.png" width="20px" height="20px" alt="" />
              </Button>
              <Button
                compact
                size="small"
                onClick={() => this.setState({ mode: "draw_polygon" })}
              >
                <img src="area.png" width="20px" height="20px" alt="" />
              </Button>
              <Button
                compact
                size="small"
                onClick={() => this.setState({ mode: "draw_point" })}
              >
                <img src="bufferpoint.png" width="20px" height="20px" alt="" />
              </Button>
              <Button
                compact
                size="small"
                onClick={() => this.setState({ mode: "draw_line_string" })}
              >
                <img src="bufferline.png" width="20px" height="20px" alt="" />
              </Button>
              <Button compact size="small">
                <img src="layer.png" width="20px" height="20px" alt="" />
              </Button>
            </Button.Group>
          </div>

          {/* CONVERTER FORM */}
          <div
            style={{
              backgroundColor: "white",
              position: "fixed",
              bottom: "60px",
              height: "180px",
              width: "250px",
              left: "20px",
              padding: "10px",
              overflowY: "scroll",
              display: this.state.conver
            }}
          >
            <Form size="mini">
              <Form.Field>
                <label>Convert Area</label>
                <Form.Group>
                  <Form.Input
                    placeholder="1"
                    width={10}
                    name="inputarea"
                    value={this.inputarea}
                    onChange={this._converter}
                  />
                  <Form.Field
                    placeholder="km²"
                    control={Select}
                    name="inputarea_"
                    onChange={this._converter}
                    width={5}
                    options={[
                      { key: "k", text: "km²", value: 1 },
                      { key: "m", text: "m²", value: 1000000 },
                      { key: "c", text: "cm²", value: 10000000000 }
                    ]}
                  />
                </Form.Group>
                <Form.Group>
                  <Form.Input
                    readOnly
                    placeholder={this.state.outputarea}
                    width={10}
                  />
                  <Form.Field
                    placeholder="km²"
                    control={Select}
                    name="outputarea_"
                    onChange={this._converter}
                    width={5}
                    options={[
                      { key: "k", text: "km²", value: 1 },
                      { key: "m", text: "m²", value: 1000000 },
                      { key: "c", text: "cm²", value: 10000000000 }
                    ]}
                  />
                </Form.Group>
              </Form.Field>
              <Form.Field>
                <label>Convert Length</label>
                <Form.Group>
                  <Form.Input
                    placeholder="1"
                    width={10}
                    name="inputlength"
                    value={this.inputlength}
                    onChange={this._converter}
                  />
                  <Form.Field
                    placeholder="km"
                    control={Select}
                    name="inputlength_"
                    onChange={this._converter}
                    width={5}
                    options={[
                      { key: "k", text: "km", value: 1 },
                      { key: "m", text: "meters", value: 1000 },
                      { key: "c", text: "cm", value: 100000 }
                    ]}
                  />
                </Form.Group>
                <Form.Group>
                  <Form.Input
                    readOnly
                    placeholder={this.state.outputlength}
                    width={10}
                  />
                  <Form.Field
                    placeholder="km"
                    control={Select}
                    name="outputlength_"
                    onChange={this._converter}
                    width={5}
                    options={[
                      { key: "k", text: "km", value: 1 },
                      { key: "m", text: "meters", value: 1000 },
                      { key: "c", text: "cm", value: 100000 }
                    ]}
                  />
                </Form.Group>
              </Form.Field>
            </Form>
          </div>

          {/* TABLE LONGLAT */}
          <Table
            collapsing
            id="tbl"
            style={{ top: "80px", display: this.state.table }}
            size="small"
            celled
            structured
          >
            <Table.Header />
            <Table.Body>
              <Table.Row>
                <Table.HeaderCell>
                  <center>longitude</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Langtitude</center>
                </Table.HeaderCell>
              </Table.Row>
              {this.state.arrTbl}
            </Table.Body>
          </Table>

          {/* HASIL AREA DISTANCE */}
          {this.state.label}
        </div>

        {/* DETAILS */}
        <div
          style={{
            position: "fixed",
            backgroundColor: " rgba(113, 124, 124, 0.7)",
            bottom: "40px",
            height: "155px",
            width: "100%",
            display: this.state.details,
            overflowY: "scroll"
          }}
        >
          {/* POLICE DETAILS */}
          <Table
            collapsing
            size="small"
            style={{ display: this.state.tablepolice }}
          >
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell>
                  <center>No</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Longtitude</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Latitude</center>
                </Table.HeaderCell>
              </Table.Row>
            </Table.Header>
            <Table.Body>{this.state.arrshowPolice}</Table.Body>
          </Table>

          {/* CCTV DETAILS */}
          <Table
            collapsing
            size="small"
            style={{ display: this.state.tableCCTV }}
          >
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell>
                  <center>No</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Source</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Longtitude</center>
                </Table.HeaderCell>
                <Table.HeaderCell>
                  <center>Latitude</center>
                </Table.HeaderCell>
              </Table.Row>
            </Table.Header>
            <Table.Body>{this.state.arrshowCCTV}</Table.Body>
          </Table>

          {/* CLOSE BUTTON */}
          <Button
            compact
            color="red"
            size="small"
            onClick={() =>
              this.setState({
                details: "none",
                arrshowPolice: [],
                tablepolice: "none",
                arrshowCCTV: [],
                tableCCTV: "none"
              })
            }
            style={{
              position: "fixed",
              right: "-3px",
              bottom: "245px",
              color: "white",
              opacity: "0.7"
            }}
          >
            X
          </Button>

          {/* MENU DETAILS */}
          <div
            style={{
              position: "fixed",
              backgroundColor: " rgb(113, 124, 124)",
              bottom: "195px",
              width: "100%",
              display: "inline-block",
              padding: "5px"
            }}
          >
            <Form size="mini">
              <Form.Group>
                Field:
                <Form.Field control={Select} options={[]} width={2} />
                Type:
                <Form.Field
                  width={2}
                  control={Select}
                  options={[
                    { key: "a", text: "==", value: 1 },
                    { key: "b", text: "!=", value: 2 },
                    { key: "c", text: ">", value: 3 },
                    { key: "d", text: ">=", value: 4 },
                    { key: "e", text: "<", value: 5 },
                    { key: "f", text: "<=", value: 6 },
                    { key: "g", text: "include", value: 7 }
                  ]}
                />
                Value:
                <Form.Input width={2} />
              </Form.Group>
            </Form>
            <Button.Group
              compact
              size="mini"
              style={{ position: "fixed", bottom: "215px", left: "600px" }}
            >
              <Button icon="backward" />
              <Button icon="reply" />
              <Button icon="share" />
              <Button icon="arrow down" />
            </Button.Group>
          </div>
        </div>

        {/* INSPECT */}
        <Button
          size="mini"
          color="red"
          style={{
            display: this.state.closeinspect,
            position: "fixed",
            bottom: "40px",
            left: "650px"
          }}
          onClick={() =>
            this.setState({
              arrinspectBanjir1: [],
              arrinspectBanjir2: [],
              arrinspectCCTV: [],
              arrinspectPolice: [],
              closeinspect: "none",
              cctvbutton: 0,
              kantorbutton: 0
            })
          }
        >
          X
        </Button>
        <div
          style={{
            position: "fixed",
            backgroundColor: " rgba(113, 124, 124, 0.7)",
            bottom: "150px",
            left: "460px",
            height: "300px",
            width: "400px",
            padding: "20px",
            display: this.state.inspect
          }}
        >
          <h3>Select layer to inspect.</h3>
          <h3>
            When this feature is active, you can click at the selected layer on
            the map to audit property data. Don'console.log(this.arrPolice)
            forget to activate layer and set icon first.
          </h3>
          <Form size="mini">
            <Form.Field>
              <Form.Group>
                <Form.Field
                  placeholder="-Select-"
                  control={Select}
                  name="datainspect"
                  onChange={this._Inspect}
                  options={[
                    { text: "All", value: 1 },
                    { text: "CCTV", value: 2 },
                    { text: "Police", value: 3 },
                    { text: "Banjir 1990", value: 4 },
                    { text: "Banjir 2000", value: 5 }
                  ]}
                />
              </Form.Group>
            </Form.Field>
          </Form>
          <Button.Group
            size="mini"
            style={{ position: "fixed", bottom: "170px", left: "750px" }}
          >
            <Button
              onClick={() =>
                this.setState({
                  inspect: "none"
                })
              }
            >
              CANCEL
            </Button>
          </Button.Group>
        </div>

        {/* NAVIGATION */}
        <div
          style={{
            position: "fixed",
            backgroundColor: "rgba(113, 124, 124, 0.7)",
            bottom: "70px",
            right: "10px",
            height: "150px",
            width: "300px",
            display: this.state.navigation
          }}
        >
          {/* CLOSE BUTTON */}
          <Button
            compact
            color="red"
            size="small"
            onClick={() =>
              this.setState({
                navigation: "none"
              })
            }
            style={{
              position: "fixed",
              right: "7px",
              bottom: "218px",
              color: "white",
              opacity: "0.7"
            }}
          >
            X
          </Button>

          <center>NAVIGATION</center>
        </div>

        {/** CHANGE STYLE MAPBOX */}
        <div
          style={{
            position: "fixed",
            top: "9px",
            padding: "5px",
            right: "200px"
          }}
        >
          <Button.Group size="mini">
            <Button
              compact
              value="mapbox://styles/mapbox/streets-v11"
              onClick={this._StyleChange}
            >
              Streets
            </Button>
            <Button
              compact
              value="mapbox://styles/mapbox/satellite-v9"
              onClick={this._StyleChange}
            >
              Sattelite
            </Button>
            <Button
              compact
              value="mapbox://styles/mapbox/satellite-streets-v9"
              onClick={this._StyleChange}
            >
              Hybrid
            </Button>
            <Button
              compact
              value="mapbox://styles/mapbox/navigation-preview-day-v2"
              onClick={this._StyleChange}
            >
              Preview
            </Button>
          </Button.Group>
        </div>

        {/* BUTTON NAVIGATION */}
        <div id="Bottom">
          <a href="https://www.mapid.io/">
            <img src="mapid-logo.svg" align="center" height="30px" alt="logo" />
          </a>
          <Button.Group size="mini" compact>
            <Button compact size="small">
              <img src="geo-icon.png" height="10px" alt="geo" />
              <img src="mapid-icon.png" height="10px" alt="mapid" />
            </Button>
            <Button
              content="Toolbox"
              icon="briefcase"
              labelPosition="left"
              onClick={() =>
                this.setState({
                  display: "inline-block",
                  inspect: "none",
                  navigation: "none"
                })
              }
            />
            <Button
              content="Details"
              icon="bars"
              labelPosition="left"
              onClick={() => this.setState({ details: "inline-block" })}
            />
            <Button
              content="Inspect"
              icon="search"
              labelPosition="left"
              onClick={() =>
                this.setState({
                  inspect: "inline-block",
                  display: "none",
                  navigation: "none"
                })
              }
            />
            <Button
              content="Navigate"
              icon="location arrow"
              labelPosition="left"
              onClick={() =>
                this.setState({
                  navigation: "inline-block",
                  display: "none",
                  inspect: "none"
                })
              }
            />
            <Button id="isilang" />
          </Button.Group>
        </div>

        {/* TABLE LAYER */}
        <div
          style={{
            display: "block",
            left: this.state.layer,
            position: "absolute",
            top: 0,
            zIndex: 999,
            overflowX: "scroll",
            maxHeight: "200px",
            marginTop: "0.5em"
          }}
        >
          <Table
            size="small"
            collapsing
            style={{
              backgroundcolor: "rgba(113, 124, 124, 0.7)",
              width: "245px"
            }}
          >
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell colSpan="2">
                  <center>Layer Manager</center>
                </Table.HeaderCell>
              </Table.Row>
            </Table.Header>
            <Table.Body>
              <Table.Row>
                <Table.Cell collapsing>
                  <Button
                    compact
                    size="mini"
                    style={{ display: this.state.onPolice, float: "left" }}
                    onClick={() => this._addPolice()}
                    icon="eye"
                    disabled={this.state.kantorbutton}
                  />
                  <Button
                    compact
                    size="mini"
                    style={{ display: this.state.offPolice, float: "left" }}
                    onClick={() =>
                      this.setState({
                        arrPolice: [],
                        onPolice: "block",
                        offPolice: "none"
                      })
                    }
                    icon="eye slash"
                    disabled={this.state.kantorbutton}
                  />
                </Table.Cell>
                <Table.Cell onClick={() => this._showPolice()}>
                  Kantor Polisi
                </Table.Cell>
              </Table.Row>
              <Table.Row>
                <Table.Cell collapsing>
                  <Button
                    compact
                    size="mini"
                    style={{ display: this.state.onCCTV, float: "left" }}
                    icon="eye"
                    onClick={() => this._addCCTV()}
                    disabled={this.state.cctvbutton}
                  />
                  <Button
                    compact
                    size="mini"
                    style={{ display: this.state.offCCTV, float: "left" }}
                    icon="eye slash"
                    onClick={() =>
                      this.setState({
                        arrCCTV: [],
                        onCCTV: "block",
                        offCCTV: "none"
                      })
                    }
                    disabled={this.state.cctvbutton}
                  />
                </Table.Cell>
                <Table.Cell onClick={() => this._showCCTV()}>CCTV</Table.Cell>
              </Table.Row>
              <Table.Row>
                <Table.Cell collapsing>
                  <Button
                    icon="eye"
                    compact
                    style={{ display: this.state.onBanjir1, float: "left" }}
                    size="mini"
                    onClick={() =>
                      this.setState({
                        banjir1: 0.5,
                        onBanjir1: "none",
                        offBanjir1: "block"
                      })
                    }
                  />
                  <Button
                    icon="eye slash"
                    compact
                    style={{ display: this.state.offBanjir1, float: "left" }}
                    size="mini"
                    onClick={() =>
                      this.setState({
                        banjir1: 0,
                        onBanjir1: "block",
                        offBanjir1: "none"
                      })
                    }
                  />
                </Table.Cell>
                <Table.Cell>Banjir 1990</Table.Cell>
              </Table.Row>
              <Table.Row>
                <Table.Cell collapsing>
                  <Button
                    icon="eye"
                    compact
                    style={{ display: this.state.onBanjir2, float: "left" }}
                    size="mini"
                    onClick={() =>
                      this.setState({
                        banjir2: 0.5,
                        onBanjir2: "none",
                        offBanjir2: "block"
                      })
                    }
                  />
                  <Button
                    icon="eye slash"
                    compact
                    style={{ display: this.state.offBanjir2, float: "left" }}
                    size="mini"
                    onClick={() =>
                      this.setState({
                        banjir2: 0,
                        onBanjir2: "block",
                        offBanjir2: "none"
                      })
                    }
                  />
                </Table.Cell>
                <Table.Cell>Banjir 2000</Table.Cell>
              </Table.Row>
            </Table.Body>
          </Table>

          {/* HIDE TABLE LAYER */}
          <Button
            compact
            color="blue"
            size="small"
            onClick={() =>
              this.setState({
                layer: "-265px",
                close: "none",
                open: "inline-block"
              })
            }
            style={{
              position: "fixed",
              left: "261px",
              top: "8px",
              display: this.state.close,
              opacity: "0.7"
            }}
          >
            {"<<"}
          </Button>

          {/* SHOW TABLE LAYER */}
          <Button
            compact
            color="blue"
            size="small"
            onClick={() =>
              this.setState({
                layer: "0.5em",
                close: "inline-block",
                open: "none"
              })
            }
            style={{
              position: "fixed",
              left: "-10px",
              top: "8px",
              display: this.state.open,
              opacity: "0.7"
            }}
          >
            {">>"}
          </Button>
        </div>
      </div>
    );
  }
}

export default App;
